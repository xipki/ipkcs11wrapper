// Copyright (c) 2022 xipki. All rights reserved.
// License Apache License 2.0

package test.pkcs11.wrapper;

import org.junit.Assert;
import org.junit.Test;
import org.xipki.pkcs11.wrapper.Functions;

import static org.xipki.pkcs11.wrapper.PKCS11Constants.*;

public class CodeNameMapTest {

  private static void evaluate(Category category, long code, String name, String... aliases) {
    Assert.assertEquals(category + "." + Functions.toFullHex(code), name, codeToName(category, code));
    Long code2 = nameToCode(category, name);
    Assert.assertNotNull(category + "." + name, code2);
    Assert.assertEquals(category + "." + name, code, code2.longValue());
    if (aliases != null) {
      for (String alias : aliases) {
        code2 = nameToCode(category, alias);
        Assert.assertNotNull(category + "." + alias, code2);
        Assert.assertEquals(category + "." + alias, code, code2.longValue());
      }
    }
  }

  @Test
  public void testCKA() {
    testCKA(CKA_CLASS, "CKA_CLASS");
    testCKA(CKA_TOKEN, "CKA_TOKEN");
    testCKA(CKA_PRIVATE, "CKA_PRIVATE");
    testCKA(CKA_LABEL, "CKA_LABEL");
    testCKA(CKA_UNIQUE_ID, "CKA_UNIQUE_ID");
    testCKA(CKA_APPLICATION, "CKA_APPLICATION");
    testCKA(CKA_VALUE, "CKA_VALUE");
    testCKA(CKA_OBJECT_ID, "CKA_OBJECT_ID");
    testCKA(CKA_CERTIFICATE_TYPE, "CKA_CERTIFICATE_TYPE");
    testCKA(CKA_ISSUER, "CKA_ISSUER");
    testCKA(CKA_SERIAL_NUMBER, "CKA_SERIAL_NUMBER");
    testCKA(CKA_AC_ISSUER, "CKA_AC_ISSUER");
    testCKA(CKA_OWNER, "CKA_OWNER");
    testCKA(CKA_ATTR_TYPES, "CKA_ATTR_TYPES");
    testCKA(CKA_TRUSTED, "CKA_TRUSTED");
    testCKA(CKA_CERTIFICATE_CATEGORY, "CKA_CERTIFICATE_CATEGORY");
    testCKA(CKA_JAVA_MIDP_SECURITY_DOMAIN, "CKA_JAVA_MIDP_SECURITY_DOMAIN");
    testCKA(CKA_URL, "CKA_URL");
    testCKA(CKA_HASH_OF_SUBJECT_PUBLIC_KEY, "CKA_HASH_OF_SUBJECT_PUBLIC_KEY");
    testCKA(CKA_HASH_OF_ISSUER_PUBLIC_KEY, "CKA_HASH_OF_ISSUER_PUBLIC_KEY");
    testCKA(CKA_NAME_HASH_ALGORITHM, "CKA_NAME_HASH_ALGORITHM");
    testCKA(CKA_CHECK_VALUE, "CKA_CHECK_VALUE");
    testCKA(CKA_KEY_TYPE, "CKA_KEY_TYPE");
    testCKA(CKA_SUBJECT, "CKA_SUBJECT");
    testCKA(CKA_ID, "CKA_ID");
    testCKA(CKA_SENSITIVE, "CKA_SENSITIVE");
    testCKA(CKA_ENCRYPT, "CKA_ENCRYPT");
    testCKA(CKA_DECRYPT, "CKA_DECRYPT");
    testCKA(CKA_WRAP, "CKA_WRAP");
    testCKA(CKA_UNWRAP, "CKA_UNWRAP");
    testCKA(CKA_SIGN, "CKA_SIGN");
    testCKA(CKA_SIGN_RECOVER, "CKA_SIGN_RECOVER");
    testCKA(CKA_VERIFY, "CKA_VERIFY");
    testCKA(CKA_VERIFY_RECOVER, "CKA_VERIFY_RECOVER");
    testCKA(CKA_DERIVE, "CKA_DERIVE");
    testCKA(CKA_START_DATE, "CKA_START_DATE");
    testCKA(CKA_END_DATE, "CKA_END_DATE");
    testCKA(CKA_MODULUS, "CKA_MODULUS");
    testCKA(CKA_MODULUS_BITS, "CKA_MODULUS_BITS");
    testCKA(CKA_PUBLIC_EXPONENT, "CKA_PUBLIC_EXPONENT");
    testCKA(CKA_PRIVATE_EXPONENT, "CKA_PRIVATE_EXPONENT");
    testCKA(CKA_PRIME_1, "CKA_PRIME_1");
    testCKA(CKA_PRIME_2, "CKA_PRIME_2");
    testCKA(CKA_EXPONENT_1, "CKA_EXPONENT_1");
    testCKA(CKA_EXPONENT_2, "CKA_EXPONENT_2");
    testCKA(CKA_COEFFICIENT, "CKA_COEFFICIENT");
    testCKA(CKA_PUBLIC_KEY_INFO, "CKA_PUBLIC_KEY_INFO");
    testCKA(CKA_PRIME, "CKA_PRIME");
    testCKA(CKA_SUBPRIME, "CKA_SUBPRIME");
    testCKA(CKA_BASE, "CKA_BASE");
    testCKA(CKA_PRIME_BITS, "CKA_PRIME_BITS");
    testCKA(CKA_SUBPRIME_BITS, "CKA_SUBPRIME_BITS", "CKA_SUB_PRIME_BITS");
    testCKA(CKA_VALUE_BITS, "CKA_VALUE_BITS");
    testCKA(CKA_VALUE_LEN, "CKA_VALUE_LEN");
    testCKA(CKA_EXTRACTABLE, "CKA_EXTRACTABLE");
    testCKA(CKA_LOCAL, "CKA_LOCAL");
    testCKA(CKA_NEVER_EXTRACTABLE, "CKA_NEVER_EXTRACTABLE");
    testCKA(CKA_ALWAYS_SENSITIVE, "CKA_ALWAYS_SENSITIVE");
    testCKA(CKA_KEY_GEN_MECHANISM, "CKA_KEY_GEN_MECHANISM");
    testCKA(CKA_MODIFIABLE, "CKA_MODIFIABLE");
    testCKA(CKA_COPYABLE, "CKA_COPYABLE");
    testCKA(CKA_DESTROYABLE, "CKA_DESTROYABLE");
    testCKA(CKA_EC_PARAMS, "CKA_EC_PARAMS", "CKA_ECDSA_PARAMS");
    testCKA(CKA_EC_POINT, "CKA_EC_POINT");
    testCKA(CKA_ALWAYS_AUTHENTICATE, "CKA_ALWAYS_AUTHENTICATE");
    testCKA(CKA_WRAP_WITH_TRUSTED, "CKA_WRAP_WITH_TRUSTED");
    testCKA(CKA_OTP_FORMAT, "CKA_OTP_FORMAT");
    testCKA(CKA_OTP_LENGTH, "CKA_OTP_LENGTH");
    testCKA(CKA_OTP_TIME_INTERVAL, "CKA_OTP_TIME_INTERVAL");
    testCKA(CKA_OTP_USER_FRIENDLY_MODE, "CKA_OTP_USER_FRIENDLY_MODE");
    testCKA(CKA_OTP_CHALLENGE_REQUIREMENT, "CKA_OTP_CHALLENGE_REQUIREMENT");
    testCKA(CKA_OTP_TIME_REQUIREMENT, "CKA_OTP_TIME_REQUIREMENT");
    testCKA(CKA_OTP_COUNTER_REQUIREMENT, "CKA_OTP_COUNTER_REQUIREMENT");
    testCKA(CKA_OTP_PIN_REQUIREMENT, "CKA_OTP_PIN_REQUIREMENT");
    testCKA(CKA_OTP_USER_IDENTIFIER, "CKA_OTP_USER_IDENTIFIER");
    testCKA(CKA_OTP_SERVICE_IDENTIFIER, "CKA_OTP_SERVICE_IDENTIFIER");
    testCKA(CKA_OTP_SERVICE_LOGO, "CKA_OTP_SERVICE_LOGO");
    testCKA(CKA_OTP_SERVICE_LOGO_TYPE, "CKA_OTP_SERVICE_LOGO_TYPE");
    testCKA(CKA_OTP_COUNTER, "CKA_OTP_COUNTER");
    testCKA(CKA_OTP_TIME, "CKA_OTP_TIME");
    testCKA(CKA_GOSTR3410_PARAMS, "CKA_GOSTR3410_PARAMS");
    testCKA(CKA_GOSTR3411_PARAMS, "CKA_GOSTR3411_PARAMS");
    testCKA(CKA_GOST28147_PARAMS, "CKA_GOST28147_PARAMS");
    testCKA(CKA_HW_FEATURE_TYPE, "CKA_HW_FEATURE_TYPE");
    testCKA(CKA_RESET_ON_INIT, "CKA_RESET_ON_INIT");
    testCKA(CKA_HAS_RESET, "CKA_HAS_RESET");
    testCKA(CKA_PIXEL_X, "CKA_PIXEL_X");
    testCKA(CKA_PIXEL_Y, "CKA_PIXEL_Y");
    testCKA(CKA_RESOLUTION, "CKA_RESOLUTION");
    testCKA(CKA_CHAR_ROWS, "CKA_CHAR_ROWS");
    testCKA(CKA_CHAR_COLUMNS, "CKA_CHAR_COLUMNS");
    testCKA(CKA_COLOR, "CKA_COLOR");
    testCKA(CKA_BITS_PER_PIXEL, "CKA_BITS_PER_PIXEL");
    testCKA(CKA_CHAR_SETS, "CKA_CHAR_SETS");
    testCKA(CKA_ENCODING_METHODS, "CKA_ENCODING_METHODS");
    testCKA(CKA_MIME_TYPES, "CKA_MIME_TYPES");
    testCKA(CKA_MECHANISM_TYPE, "CKA_MECHANISM_TYPE");
    testCKA(CKA_REQUIRED_CMS_ATTRIBUTES, "CKA_REQUIRED_CMS_ATTRIBUTES");
    testCKA(CKA_DEFAULT_CMS_ATTRIBUTES, "CKA_DEFAULT_CMS_ATTRIBUTES");
    testCKA(CKA_SUPPORTED_CMS_ATTRIBUTES, "CKA_SUPPORTED_CMS_ATTRIBUTES");
    testCKA(CKA_PROFILE_ID, "CKA_PROFILE_ID");
    testCKA(CKA_WRAP_TEMPLATE, "CKA_WRAP_TEMPLATE");
    testCKA(CKA_UNWRAP_TEMPLATE, "CKA_UNWRAP_TEMPLATE");
    testCKA(CKA_DERIVE_TEMPLATE, "CKA_DERIVE_TEMPLATE");
    testCKA(CKA_ALLOWED_MECHANISMS, "CKA_ALLOWED_MECHANISMS");
  }

  private static void testCKA(long code, String name, String... aliases) {
    evaluate(Category.CKA, code, name, aliases);
  }

  @Test
  public void testCKC() {
    testCKC(CKC_X_509, "CKC_X_509");
    testCKC(CKC_X_509_ATTR_CERT, "CKC_X_509_ATTR_CERT");
    testCKC(CKC_WTLS, "CKC_WTLS");
  }

  private static void testCKC(long code, String name, String... aliases) {
    evaluate(Category.CKC, code, name, aliases);
  }

  @Test
  public void testCKD() {
    testCKD(CKD_NULL, "CKD_NULL");
    testCKD(CKD_NULL, "CKD_NULL");
    testCKD(CKD_NULL, "CKD_NULL");
    testCKD(CKD_SHA1_KDF_CONCATENATE, "CKD_SHA1_KDF_CONCATENATE");
    testCKD(CKD_SHA224_KDF, "CKD_SHA224_KDF");
    testCKD(CKD_SHA256_KDF, "CKD_SHA256_KDF");
    testCKD(CKD_SHA384_KDF, "CKD_SHA384_KDF");
    testCKD(CKD_SHA512_KDF, "CKD_SHA512_KDF");
    testCKD(CKD_CPDIVERSIFY_KDF, "CKD_CPDIVERSIFY_KDF");
    testCKD(CKD_SHA3_224_KDF, "CKD_SHA3_224_KDF");
    testCKD(CKD_SHA3_256_KDF, "CKD_SHA3_256_KDF");
    testCKD(CKD_SHA3_384_KDF, "CKD_SHA3_384_KDF");
    testCKD(CKD_SHA3_512_KDF, "CKD_SHA3_512_KDF");
    testCKD(CKD_SHA1_KDF_SP800, "CKD_SHA1_KDF_SP800");
    testCKD(CKD_SHA224_KDF_SP800, "CKD_SHA224_KDF_SP800");
    testCKD(CKD_SHA256_KDF_SP800, "CKD_SHA256_KDF_SP800");
    testCKD(CKD_SHA384_KDF_SP800, "CKD_SHA384_KDF_SP800");
    testCKD(CKD_SHA512_KDF_SP800, "CKD_SHA512_KDF_SP800");
    testCKD(CKD_SHA3_224_KDF_SP800, "CKD_SHA3_224_KDF_SP800");
    testCKD(CKD_SHA3_256_KDF_SP800, "CKD_SHA3_256_KDF_SP800");
    testCKD(CKD_SHA3_384_KDF_SP800, "CKD_SHA3_384_KDF_SP800");
    testCKD(CKD_SHA3_512_KDF_SP800, "CKD_SHA3_512_KDF_SP800");
    testCKD(CKD_BLAKE2B_160_KDF, "CKD_BLAKE2B_160_KDF");
    testCKD(CKD_BLAKE2B_256_KDF, "CKD_BLAKE2B_256_KDF");
    testCKD(CKD_BLAKE2B_384_KDF, "CKD_BLAKE2B_384_KDF");
    testCKD(CKD_BLAKE2B_512_KDF, "CKD_BLAKE2B_512_KDF");
  }

  private static void testCKD(long code, String name, String... aliases) {
    evaluate(Category.CKD, code, name, aliases);
  }

  @Test
  public void testCKF_MECHANISM() {
    testCKF_MECHANISM(CKF_HW, "CKF_HW");
    testCKF_MECHANISM(CKF_MESSAGE_ENCRYPT, "CKF_MESSAGE_ENCRYPT");
    testCKF_MECHANISM(CKF_MESSAGE_DECRYPT, "CKF_MESSAGE_DECRYPT");
    testCKF_MECHANISM(CKF_MESSAGE_SIGN, "CKF_MESSAGE_SIGN");
    testCKF_MECHANISM(CKF_MESSAGE_VERIFY, "CKF_MESSAGE_VERIFY");
    testCKF_MECHANISM(CKF_MULTI_MESSAGE, "CKF_MULTI_MESSAGE");
    testCKF_MECHANISM(CKF_FIND_OBJECTS, "CKF_FIND_OBJECTS");
    testCKF_MECHANISM(CKF_ENCRYPT, "CKF_ENCRYPT");
    testCKF_MECHANISM(CKF_DECRYPT, "CKF_DECRYPT");
    testCKF_MECHANISM(CKF_DIGEST, "CKF_DIGEST");
    testCKF_MECHANISM(CKF_SIGN, "CKF_SIGN");
    testCKF_MECHANISM(CKF_SIGN_RECOVER, "CKF_SIGN_RECOVER");
    testCKF_MECHANISM(CKF_VERIFY, "CKF_VERIFY");
    testCKF_MECHANISM(CKF_VERIFY_RECOVER, "CKF_VERIFY_RECOVER");
    testCKF_MECHANISM(CKF_GENERATE, "CKF_GENERATE");
    testCKF_MECHANISM(CKF_GENERATE_KEY_PAIR, "CKF_GENERATE_KEY_PAIR");
    testCKF_MECHANISM(CKF_WRAP, "CKF_WRAP");
    testCKF_MECHANISM(CKF_UNWRAP, "CKF_UNWRAP");
    testCKF_MECHANISM(CKF_DERIVE, "CKF_DERIVE");
    testCKF_MECHANISM(CKF_EC_F_P, "CKF_EC_F_P");
    testCKF_MECHANISM(CKF_EC_F_2M, "CKF_EC_F_2M");
    testCKF_MECHANISM(CKF_EC_ECPARAMETERS, "CKF_EC_ECPARAMETERS");
    testCKF_MECHANISM(CKF_EC_OID, "CKF_EC_OID", "CKF_EC_NAMEDCURVE");
    testCKF_MECHANISM(CKF_EC_NAMEDCURVE, "CKF_EC_OID", "CKF_EC_NAMEDCURVE");
    testCKF_MECHANISM(CKF_EC_UNCOMPRESS, "CKF_EC_UNCOMPRESS");
    testCKF_MECHANISM(CKF_EC_COMPRESS, "CKF_EC_COMPRESS");
    testCKF_MECHANISM(CKF_EC_CURVENAME, "CKF_EC_CURVENAME");
  }

  private static void testCKF_MECHANISM(long code, String name, String... aliases) {
    evaluate(Category.CKF_MECHANISM, code, name, aliases);
  }

  @Test
  public void testCKF_OTP() {
    testCKF_OTP(CKF_NEXT_OTP, "CKF_NEXT_OTP");
    testCKF_OTP(CKF_EXCLUDE_TIME, "CKF_EXCLUDE_TIME");
    testCKF_OTP(CKF_EXCLUDE_COUNTER, "CKF_EXCLUDE_COUNTER");
    testCKF_OTP(CKF_EXCLUDE_CHALLENGE, "CKF_EXCLUDE_CHALLENGE");
    testCKF_OTP(CKF_EXCLUDE_PIN, "CKF_EXCLUDE_PIN");
    testCKF_OTP(CKF_USER_FRIENDLY_OTP, "CKF_USER_FRIENDLY_OTP");
  }

  private static void testCKF_OTP(long code, String name, String... aliases) {
    evaluate(Category.CKF_OTP, code, name, aliases);
  }

  @Test
  public void testCKF_SESSION() {
    testCKF_SESSION(CKF_RW_SESSION, "CKF_RW_SESSION");
    testCKF_SESSION(CKF_SERIAL_SESSION, "CKF_SERIAL_SESSION");
  }

  private static void testCKF_SESSION(long code, String name, String... aliases) {
    evaluate(Category.CKF_SESSION, code, name, aliases);
  }

  @Test
  public void testCKF_SLOT() {
    testCKF_SLOT(CKF_TOKEN_PRESENT, "CKF_TOKEN_PRESENT");
    testCKF_SLOT(CKF_REMOVABLE_DEVICE, "CKF_REMOVABLE_DEVICE");
    testCKF_SLOT(CKF_HW_SLOT, "CKF_HW_SLOT");
  }

  private static void testCKF_SLOT(long code, String name, String... aliases) {
    evaluate(Category.CKF_SLOT, code, name, aliases);
  }

  @Test
  public void testCKF_TOKEN() {
    testCKF_TOKEN(CKF_RNG, "CKF_RNG");
    testCKF_TOKEN(CKF_WRITE_PROTECTED, "CKF_WRITE_PROTECTED");
    testCKF_TOKEN(CKF_WRITE_PROTECTED, "CKF_WRITE_PROTECTED");
    testCKF_TOKEN(CKF_USER_PIN_INITIALIZED, "CKF_USER_PIN_INITIALIZED");
    testCKF_TOKEN(CKF_RESTORE_KEY_NOT_NEEDED, "CKF_RESTORE_KEY_NOT_NEEDED");
    testCKF_TOKEN(CKF_CLOCK_ON_TOKEN, "CKF_CLOCK_ON_TOKEN");
    testCKF_TOKEN(CKF_PROTECTED_AUTHENTICATION_PATH, "CKF_PROTECTED_AUTHENTICATION_PATH");
    testCKF_TOKEN(CKF_DUAL_CRYPTO_OPERATIONS, "CKF_DUAL_CRYPTO_OPERATIONS");
    testCKF_TOKEN(CKF_TOKEN_INITIALIZED, "CKF_TOKEN_INITIALIZED");
    testCKF_TOKEN(CKF_SECONDARY_AUTHENTICATION, "CKF_SECONDARY_AUTHENTICATION");
    testCKF_TOKEN(CKF_USER_PIN_COUNT_LOW, "CKF_USER_PIN_COUNT_LOW");
    testCKF_TOKEN(CKF_USER_PIN_FINAL_TRY, "CKF_USER_PIN_FINAL_TRY");
    testCKF_TOKEN(CKF_USER_PIN_LOCKED, "CKF_USER_PIN_LOCKED");
    testCKF_TOKEN(CKF_USER_PIN_TO_BE_CHANGED, "CKF_USER_PIN_TO_BE_CHANGED");
    testCKF_TOKEN(CKF_SO_PIN_COUNT_LOW, "CKF_SO_PIN_COUNT_LOW");
    testCKF_TOKEN(CKF_SO_PIN_FINAL_TRY, "CKF_SO_PIN_FINAL_TRY");
    testCKF_TOKEN(CKF_SO_PIN_LOCKED, "CKF_SO_PIN_LOCKED");
    testCKF_TOKEN(CKF_SO_PIN_TO_BE_CHANGED, "CKF_SO_PIN_TO_BE_CHANGED");
    testCKF_TOKEN(CKF_ERROR_STATE, "CKF_ERROR_STATE");
  }

  private static void testCKF_TOKEN(long code, String name, String... aliases) {
    evaluate(Category.CKF_TOKEN, code, name, aliases);
  }

  @Test
  public void testCKG_GENERATOR() {
    testCKG_GENERATOR(CKG_NO_GENERATE, "CKG_NO_GENERATE");
    testCKG_GENERATOR(CKG_GENERATE, "CKG_GENERATE");
    testCKG_GENERATOR(CKG_GENERATE_COUNTER, "CKG_GENERATE_COUNTER");
    testCKG_GENERATOR(CKG_GENERATE_RANDOM, "CKG_GENERATE_RANDOM");
  }

  private static void testCKG_GENERATOR(long code, String name, String... aliases) {
    evaluate(Category.CKG_GENERATOR, code, name, aliases);
  }

  @Test
  public void testCKG_MGF() {
    testCKG_MGF(CKG_MGF1_SHA1, "CKG_MGF1_SHA1");
    testCKG_MGF(CKG_MGF1_SHA256, "CKG_MGF1_SHA256");
    testCKG_MGF(CKG_MGF1_SHA384, "CKG_MGF1_SHA384");
    testCKG_MGF(CKG_MGF1_SHA512, "CKG_MGF1_SHA512");
    testCKG_MGF(CKG_MGF1_SHA224, "CKG_MGF1_SHA224");
    testCKG_MGF(CKG_MGF1_SHA3_224, "CKG_MGF1_SHA3_224");
    testCKG_MGF(CKG_MGF1_SHA3_256, "CKG_MGF1_SHA3_256");
    testCKG_MGF(CKG_MGF1_SHA3_384, "CKG_MGF1_SHA3_384");
    testCKG_MGF(CKG_MGF1_SHA3_512, "CKG_MGF1_SHA3_512");
  }

  private static void testCKG_MGF(long code, String name, String... aliases) {
    evaluate(Category.CKG_MGF, code, name, aliases);
  }

  @Test
  public void testCKH() {
    testCKH(CKH_MONOTONIC_COUNTER, "CKH_MONOTONIC_COUNTER");
    testCKH(CKH_CLOCK, "CKH_CLOCK");
    testCKH(CKH_USER_INTERFACE, "CKH_USER_INTERFACE");
  }

  private static void testCKH(long code, String name, String... aliases) {
    evaluate(Category.CKH, code, name, aliases);
  }

  @Test
  public void testCKK() {
    testCKK(CKK_RSA, "CKK_RSA");
    testCKK(CKK_DSA, "CKK_DSA");
    testCKK(CKK_DH, "CKK_DH");
    testCKK(CKK_EC, "CKK_EC");
    testCKK(CKK_X9_42_DH, "CKK_X9_42_DH");
    testCKK(CKK_KEA, "CKK_KEA");
    testCKK(CKK_GENERIC_SECRET, "CKK_GENERIC_SECRET");
    testCKK(CKK_RC2, "CKK_RC2");
    testCKK(CKK_RC4, "CKK_RC4");
    testCKK(CKK_DES, "CKK_DES");
    testCKK(CKK_DES2, "CKK_DES2");
    testCKK(CKK_DES3, "CKK_DES3");
    testCKK(CKK_CAST, "CKK_CAST");
    testCKK(CKK_CAST3, "CKK_CAST3");
    testCKK(CKK_CAST128, "CKK_CAST128");
    testCKK(CKK_RC5, "CKK_RC5");
    testCKK(CKK_IDEA, "CKK_IDEA");
    testCKK(CKK_SKIPJACK, "CKK_SKIPJACK");
    testCKK(CKK_BATON, "CKK_BATON");
    testCKK(CKK_JUNIPER, "CKK_JUNIPER");
    testCKK(CKK_CDMF, "CKK_CDMF");
    testCKK(CKK_AES, "CKK_AES");
    testCKK(CKK_BLOWFISH, "CKK_BLOWFISH");
    testCKK(CKK_TWOFISH, "CKK_TWOFISH");
    testCKK(CKK_SECURID, "CKK_SECURID");
    testCKK(CKK_HOTP, "CKK_HOTP");
    testCKK(CKK_ACTI, "CKK_ACTI");
    testCKK(CKK_CAMELLIA, "CKK_CAMELLIA");
    testCKK(CKK_ARIA, "CKK_ARIA");
    testCKK(CKK_MD5_HMAC, "CKK_MD5_HMAC");
    testCKK(CKK_SHA_1_HMAC, "CKK_SHA_1_HMAC", "CKK_SHA1_HMAC");
    testCKK(CKK_RIPEMD128_HMAC, "CKK_RIPEMD128_HMAC");
    testCKK(CKK_RIPEMD160_HMAC, "CKK_RIPEMD160_HMAC");
    testCKK(CKK_SHA256_HMAC, "CKK_SHA256_HMAC");
    testCKK(CKK_SHA384_HMAC, "CKK_SHA384_HMAC");
    testCKK(CKK_SHA512_HMAC, "CKK_SHA512_HMAC");
    testCKK(CKK_SHA224_HMAC, "CKK_SHA224_HMAC");
    testCKK(CKK_SEED, "CKK_SEED");
    testCKK(CKK_GOSTR3410, "CKK_GOSTR3410");
    testCKK(CKK_GOSTR3411, "CKK_GOSTR3411");
    testCKK(CKK_GOST28147, "CKK_GOST28147");
    testCKK(CKK_CHACHA20, "CKK_CHACHA20");
    testCKK(CKK_POLY1305, "CKK_POLY1305");
    testCKK(CKK_AES_XTS, "CKK_AES_XTS");
    testCKK(CKK_SHA3_224_HMAC, "CKK_SHA3_224_HMAC");
    testCKK(CKK_SHA3_256_HMAC, "CKK_SHA3_256_HMAC");
    testCKK(CKK_SHA3_384_HMAC, "CKK_SHA3_384_HMAC");
    testCKK(CKK_SHA3_512_HMAC, "CKK_SHA3_512_HMAC");
    testCKK(CKK_BLAKE2B_160_HMAC, "CKK_BLAKE2B_160_HMAC");
    testCKK(CKK_BLAKE2B_256_HMAC, "CKK_BLAKE2B_256_HMAC");
    testCKK(CKK_BLAKE2B_384_HMAC, "CKK_BLAKE2B_384_HMAC");
    testCKK(CKK_BLAKE2B_512_HMAC, "CKK_BLAKE2B_512_HMAC");
    testCKK(CKK_SALSA20, "CKK_SALSA20");
    testCKK(CKK_X2RATCHET, "CKK_X2RATCHET");
    testCKK(CKK_EC_EDWARDS, "CKK_EC_EDWARDS");
    testCKK(CKK_EC_MONTGOMERY, "CKK_EC_MONTGOMERY");
    testCKK(CKK_HKDF, "CKK_HKDF");
    testCKK(CKK_VENDOR_SM2, "CKK_VENDOR_SM2");
    testCKK(CKK_VENDOR_SM4, "CKK_VENDOR_SM4");
  }

  private static void testCKK(long code, String name, String... aliases) {
    evaluate(Category.CKK, code, name, aliases);
  }

  @Test
  public void testCKM() {
    testCKM(CKM_RSA_PKCS_KEY_PAIR_GEN, "CKM_RSA_PKCS_KEY_PAIR_GEN");
    testCKM(CKM_RSA_PKCS, "CKM_RSA_PKCS");
    testCKM(CKM_RSA_9796, "CKM_RSA_9796");
    testCKM(CKM_RSA_X_509, "CKM_RSA_X_509");
    testCKM(CKM_MD2_RSA_PKCS, "CKM_MD2_RSA_PKCS");
    testCKM(CKM_MD5_RSA_PKCS, "CKM_MD5_RSA_PKCS");
    testCKM(CKM_SHA1_RSA_PKCS, "CKM_SHA1_RSA_PKCS");
    testCKM(CKM_RIPEMD128_RSA_PKCS, "CKM_RIPEMD128_RSA_PKCS");
    testCKM(CKM_RIPEMD160_RSA_PKCS, "CKM_RIPEMD160_RSA_PKCS");
    testCKM(CKM_RSA_PKCS_OAEP, "CKM_RSA_PKCS_OAEP");
    testCKM(CKM_RSA_X9_31_KEY_PAIR_GEN, "CKM_RSA_X9_31_KEY_PAIR_GEN");
    testCKM(CKM_RSA_X9_31, "CKM_RSA_X9_31");
    testCKM(CKM_SHA1_RSA_X9_31, "CKM_SHA1_RSA_X9_31");
    testCKM(CKM_RSA_PKCS_PSS, "CKM_RSA_PKCS_PSS");
    testCKM(CKM_SHA1_RSA_PKCS_PSS, "CKM_SHA1_RSA_PKCS_PSS");
    testCKM(CKM_DSA_KEY_PAIR_GEN, "CKM_DSA_KEY_PAIR_GEN");
    testCKM(CKM_DSA, "CKM_DSA");
    testCKM(CKM_DSA_SHA1, "CKM_DSA_SHA1");
    testCKM(CKM_DSA_SHA224, "CKM_DSA_SHA224");
    testCKM(CKM_DSA_SHA256, "CKM_DSA_SHA256");
    testCKM(CKM_DSA_SHA384, "CKM_DSA_SHA384");
    testCKM(CKM_DSA_SHA512, "CKM_DSA_SHA512");
    testCKM(CKM_DSA_SHA3_224, "CKM_DSA_SHA3_224");
    testCKM(CKM_DSA_SHA3_256, "CKM_DSA_SHA3_256");
    testCKM(CKM_DSA_SHA3_384, "CKM_DSA_SHA3_384");
    testCKM(CKM_DSA_SHA3_512, "CKM_DSA_SHA3_512");
    testCKM(CKM_DH_PKCS_KEY_PAIR_GEN, "CKM_DH_PKCS_KEY_PAIR_GEN");
    testCKM(CKM_DH_PKCS_DERIVE, "CKM_DH_PKCS_DERIVE");
    testCKM(CKM_X9_42_DH_KEY_PAIR_GEN, "CKM_X9_42_DH_KEY_PAIR_GEN");
    testCKM(CKM_X9_42_DH_DERIVE, "CKM_X9_42_DH_DERIVE");
    testCKM(CKM_X9_42_DH_HYBRID_DERIVE, "CKM_X9_42_DH_HYBRID_DERIVE");
    testCKM(CKM_X9_42_MQV_DERIVE, "CKM_X9_42_MQV_DERIVE");
    testCKM(CKM_SHA256_RSA_PKCS, "CKM_SHA256_RSA_PKCS");
    testCKM(CKM_SHA384_RSA_PKCS, "CKM_SHA384_RSA_PKCS");
    testCKM(CKM_SHA512_RSA_PKCS, "CKM_SHA512_RSA_PKCS");
    testCKM(CKM_SHA256_RSA_PKCS_PSS, "CKM_SHA256_RSA_PKCS_PSS");
    testCKM(CKM_SHA384_RSA_PKCS_PSS, "CKM_SHA384_RSA_PKCS_PSS");
    testCKM(CKM_SHA512_RSA_PKCS_PSS, "CKM_SHA512_RSA_PKCS_PSS");
    testCKM(CKM_SHA224_RSA_PKCS, "CKM_SHA224_RSA_PKCS");
    testCKM(CKM_SHA224_RSA_PKCS_PSS, "CKM_SHA224_RSA_PKCS_PSS");
    testCKM(CKM_SHA512_224, "CKM_SHA512_224");
    testCKM(CKM_SHA512_224_HMAC, "CKM_SHA512_224_HMAC");
    testCKM(CKM_SHA512_224_HMAC_GENERAL, "CKM_SHA512_224_HMAC_GENERAL");
    testCKM(CKM_SHA512_224_KEY_DERIVATION, "CKM_SHA512_224_KEY_DERIVATION");
    testCKM(CKM_SHA512_256, "CKM_SHA512_256");
    testCKM(CKM_SHA512_256_HMAC, "CKM_SHA512_256_HMAC");
    testCKM(CKM_SHA512_256_HMAC_GENERAL, "CKM_SHA512_256_HMAC_GENERAL");
    testCKM(CKM_SHA512_256_KEY_DERIVATION, "CKM_SHA512_256_KEY_DERIVATION");
    testCKM(CKM_SHA512_T, "CKM_SHA512_T");
    testCKM(CKM_SHA512_T_HMAC, "CKM_SHA512_T_HMAC");
    testCKM(CKM_SHA512_T_HMAC_GENERAL, "CKM_SHA512_T_HMAC_GENERAL");
    testCKM(CKM_SHA512_T_KEY_DERIVATION, "CKM_SHA512_T_KEY_DERIVATION");
    testCKM(CKM_SHA3_256_RSA_PKCS, "CKM_SHA3_256_RSA_PKCS");
    testCKM(CKM_SHA3_384_RSA_PKCS, "CKM_SHA3_384_RSA_PKCS");
    testCKM(CKM_SHA3_512_RSA_PKCS, "CKM_SHA3_512_RSA_PKCS");
    testCKM(CKM_SHA3_256_RSA_PKCS_PSS, "CKM_SHA3_256_RSA_PKCS_PSS");
    testCKM(CKM_SHA3_384_RSA_PKCS_PSS, "CKM_SHA3_384_RSA_PKCS_PSS");
    testCKM(CKM_SHA3_512_RSA_PKCS_PSS, "CKM_SHA3_512_RSA_PKCS_PSS");
    testCKM(CKM_SHA3_224_RSA_PKCS, "CKM_SHA3_224_RSA_PKCS");
    testCKM(CKM_SHA3_224_RSA_PKCS_PSS, "CKM_SHA3_224_RSA_PKCS_PSS");
    testCKM(CKM_RC2_KEY_GEN, "CKM_RC2_KEY_GEN");
    testCKM(CKM_RC2_ECB, "CKM_RC2_ECB");
    testCKM(CKM_RC2_CBC, "CKM_RC2_CBC");
    testCKM(CKM_RC2_MAC, "CKM_RC2_MAC");
    testCKM(CKM_RC2_MAC_GENERAL, "CKM_RC2_MAC_GENERAL");
    testCKM(CKM_RC2_CBC_PAD, "CKM_RC2_CBC_PAD");
    testCKM(CKM_RC4_KEY_GEN, "CKM_RC4_KEY_GEN");
    testCKM(CKM_RC4, "CKM_RC4");
    testCKM(CKM_DES_KEY_GEN, "CKM_DES_KEY_GEN");
    testCKM(CKM_DES_ECB, "CKM_DES_ECB");
    testCKM(CKM_DES_CBC, "CKM_DES_CBC");
    testCKM(CKM_DES_MAC, "CKM_DES_MAC");
    testCKM(CKM_DES_MAC_GENERAL, "CKM_DES_MAC_GENERAL");
    testCKM(CKM_DES_CBC_PAD, "CKM_DES_CBC_PAD");
    testCKM(CKM_DES2_KEY_GEN, "CKM_DES2_KEY_GEN");
    testCKM(CKM_DES3_KEY_GEN, "CKM_DES3_KEY_GEN");
    testCKM(CKM_DES3_ECB, "CKM_DES3_ECB");
    testCKM(CKM_DES3_CBC, "CKM_DES3_CBC");
    testCKM(CKM_DES3_MAC, "CKM_DES3_MAC");
    testCKM(CKM_DES3_MAC_GENERAL, "CKM_DES3_MAC_GENERAL");
    testCKM(CKM_DES3_CBC_PAD, "CKM_DES3_CBC_PAD");
    testCKM(CKM_DES3_CMAC_GENERAL, "CKM_DES3_CMAC_GENERAL");
    testCKM(CKM_DES3_CMAC, "CKM_DES3_CMAC");
    testCKM(CKM_CDMF_KEY_GEN, "CKM_CDMF_KEY_GEN");
    testCKM(CKM_CDMF_ECB, "CKM_CDMF_ECB");
    testCKM(CKM_CDMF_CBC, "CKM_CDMF_CBC");
    testCKM(CKM_CDMF_MAC, "CKM_CDMF_MAC");
    testCKM(CKM_CDMF_MAC_GENERAL, "CKM_CDMF_MAC_GENERAL");
    testCKM(CKM_CDMF_CBC_PAD, "CKM_CDMF_CBC_PAD");
    testCKM(CKM_DES_OFB64, "CKM_DES_OFB64");
    testCKM(CKM_DES_OFB8, "CKM_DES_OFB8");
    testCKM(CKM_DES_CFB64, "CKM_DES_CFB64");
    testCKM(CKM_DES_CFB8, "CKM_DES_CFB8");
    testCKM(CKM_MD2, "CKM_MD2");
    testCKM(CKM_MD2_HMAC, "CKM_MD2_HMAC");
    testCKM(CKM_MD2_HMAC_GENERAL, "CKM_MD2_HMAC_GENERAL");
    testCKM(CKM_MD5, "CKM_MD5");
    testCKM(CKM_MD5_HMAC, "CKM_MD5_HMAC");
    testCKM(CKM_MD5_HMAC_GENERAL, "CKM_MD5_HMAC_GENERAL");
    testCKM(CKM_SHA_1, "CKM_SHA_1");
    testCKM(CKM_SHA_1_HMAC, "CKM_SHA_1_HMAC");
    testCKM(CKM_SHA_1_HMAC_GENERAL, "CKM_SHA_1_HMAC_GENERAL");
    testCKM(CKM_RIPEMD128, "CKM_RIPEMD128");
    testCKM(CKM_RIPEMD128_HMAC, "CKM_RIPEMD128_HMAC");
    testCKM(CKM_RIPEMD128_HMAC_GENERAL, "CKM_RIPEMD128_HMAC_GENERAL");
    testCKM(CKM_RIPEMD160, "CKM_RIPEMD160");
    testCKM(CKM_RIPEMD160_HMAC, "CKM_RIPEMD160_HMAC");
    testCKM(CKM_RIPEMD160_HMAC_GENERAL, "CKM_RIPEMD160_HMAC_GENERAL");
    testCKM(CKM_SHA256, "CKM_SHA256");
    testCKM(CKM_SHA256_HMAC, "CKM_SHA256_HMAC");
    testCKM(CKM_SHA256_HMAC_GENERAL, "CKM_SHA256_HMAC_GENERAL");
    testCKM(CKM_SHA224, "CKM_SHA224");
    testCKM(CKM_SHA224_HMAC, "CKM_SHA224_HMAC");
    testCKM(CKM_SHA224_HMAC_GENERAL, "CKM_SHA224_HMAC_GENERAL");
    testCKM(CKM_SHA384, "CKM_SHA384");
    testCKM(CKM_SHA384_HMAC, "CKM_SHA384_HMAC");
    testCKM(CKM_SHA384_HMAC_GENERAL, "CKM_SHA384_HMAC_GENERAL");
    testCKM(CKM_SHA512, "CKM_SHA512");
    testCKM(CKM_SHA512_HMAC, "CKM_SHA512_HMAC");
    testCKM(CKM_SHA512_HMAC_GENERAL, "CKM_SHA512_HMAC_GENERAL");
    testCKM(CKM_SECURID_KEY_GEN, "CKM_SECURID_KEY_GEN");
    testCKM(CKM_SECURID, "CKM_SECURID");
    testCKM(CKM_HOTP_KEY_GEN, "CKM_HOTP_KEY_GEN");
    testCKM(CKM_HOTP, "CKM_HOTP");
    testCKM(CKM_ACTI, "CKM_ACTI");
    testCKM(CKM_ACTI_KEY_GEN, "CKM_ACTI_KEY_GEN");
    testCKM(CKM_SHA3_256, "CKM_SHA3_256");
    testCKM(CKM_SHA3_256_HMAC, "CKM_SHA3_256_HMAC");
    testCKM(CKM_SHA3_256_HMAC_GENERAL, "CKM_SHA3_256_HMAC_GENERAL");
    testCKM(CKM_SHA3_256_KEY_GEN, "CKM_SHA3_256_KEY_GEN");
    testCKM(CKM_SHA3_224, "CKM_SHA3_224");
    testCKM(CKM_SHA3_224_HMAC, "CKM_SHA3_224_HMAC");
    testCKM(CKM_SHA3_224_HMAC_GENERAL, "CKM_SHA3_224_HMAC_GENERAL");
    testCKM(CKM_SHA3_224_KEY_GEN, "CKM_SHA3_224_KEY_GEN");
    testCKM(CKM_SHA3_384, "CKM_SHA3_384");
    testCKM(CKM_SHA3_384_HMAC, "CKM_SHA3_384_HMAC");
    testCKM(CKM_SHA3_384_HMAC_GENERAL, "CKM_SHA3_384_HMAC_GENERAL");
    testCKM(CKM_SHA3_384_KEY_GEN, "CKM_SHA3_384_KEY_GEN");
    testCKM(CKM_SHA3_512, "CKM_SHA3_512");
    testCKM(CKM_SHA3_512_HMAC, "CKM_SHA3_512_HMAC");
    testCKM(CKM_SHA3_512_HMAC_GENERAL, "CKM_SHA3_512_HMAC_GENERAL");
    testCKM(CKM_SHA3_512_KEY_GEN, "CKM_SHA3_512_KEY_GEN");
    testCKM(CKM_CAST_KEY_GEN, "CKM_CAST_KEY_GEN");
    testCKM(CKM_CAST_ECB, "CKM_CAST_ECB");
    testCKM(CKM_CAST_CBC, "CKM_CAST_CBC");
    testCKM(CKM_CAST_MAC, "CKM_CAST_MAC");
    testCKM(CKM_CAST_MAC_GENERAL, "CKM_CAST_MAC_GENERAL");
    testCKM(CKM_CAST_CBC_PAD, "CKM_CAST_CBC_PAD");
    testCKM(CKM_CAST3_KEY_GEN, "CKM_CAST3_KEY_GEN");
    testCKM(CKM_CAST3_ECB, "CKM_CAST3_ECB");
    testCKM(CKM_CAST3_CBC, "CKM_CAST3_CBC");
    testCKM(CKM_CAST3_MAC, "CKM_CAST3_MAC");
    testCKM(CKM_CAST3_MAC_GENERAL, "CKM_CAST3_MAC_GENERAL");
    testCKM(CKM_CAST3_CBC_PAD, "CKM_CAST3_CBC_PAD");
    testCKM(CKM_CAST128_KEY_GEN, "CKM_CAST128_KEY_GEN");
    testCKM(CKM_CAST128_ECB, "CKM_CAST128_ECB");
    testCKM(CKM_CAST128_CBC, "CKM_CAST128_CBC", "CKM_CAST5_CBC");
    testCKM(CKM_CAST128_MAC, "CKM_CAST128_MAC", "CKM_CAST5_MAC");
    testCKM(CKM_CAST128_MAC_GENERAL, "CKM_CAST128_MAC_GENERAL", "CKM_CAST5_MAC_GENERAL");
    testCKM(CKM_CAST128_CBC_PAD, "CKM_CAST128_CBC_PAD", "CKM_CAST5_CBC_PAD");
    testCKM(CKM_RC5_KEY_GEN, "CKM_RC5_KEY_GEN");
    testCKM(CKM_RC5_ECB, "CKM_RC5_ECB");
    testCKM(CKM_RC5_CBC, "CKM_RC5_CBC");
    testCKM(CKM_RC5_MAC, "CKM_RC5_MAC");
    testCKM(CKM_RC5_MAC_GENERAL, "CKM_RC5_MAC_GENERAL");
    testCKM(CKM_RC5_CBC_PAD, "CKM_RC5_CBC_PAD");
    testCKM(CKM_IDEA_KEY_GEN, "CKM_IDEA_KEY_GEN");
    testCKM(CKM_IDEA_ECB, "CKM_IDEA_ECB");
    testCKM(CKM_IDEA_CBC, "CKM_IDEA_CBC");
    testCKM(CKM_IDEA_MAC, "CKM_IDEA_MAC");
    testCKM(CKM_IDEA_MAC_GENERAL, "CKM_IDEA_MAC_GENERAL");
    testCKM(CKM_IDEA_CBC_PAD, "CKM_IDEA_CBC_PAD");
    testCKM(CKM_GENERIC_SECRET_KEY_GEN, "CKM_GENERIC_SECRET_KEY_GEN");
    testCKM(CKM_CONCATENATE_BASE_AND_KEY, "CKM_CONCATENATE_BASE_AND_KEY");
    testCKM(CKM_CONCATENATE_BASE_AND_DATA, "CKM_CONCATENATE_BASE_AND_DATA");
    testCKM(CKM_CONCATENATE_DATA_AND_BASE, "CKM_CONCATENATE_DATA_AND_BASE");
    testCKM(CKM_XOR_BASE_AND_DATA, "CKM_XOR_BASE_AND_DATA");
    testCKM(CKM_EXTRACT_KEY_FROM_KEY, "CKM_EXTRACT_KEY_FROM_KEY");
    testCKM(CKM_SSL3_PRE_MASTER_KEY_GEN, "CKM_SSL3_PRE_MASTER_KEY_GEN");
    testCKM(CKM_SSL3_MASTER_KEY_DERIVE, "CKM_SSL3_MASTER_KEY_DERIVE");
    testCKM(CKM_SSL3_KEY_AND_MAC_DERIVE, "CKM_SSL3_KEY_AND_MAC_DERIVE");
    testCKM(CKM_SSL3_MASTER_KEY_DERIVE_DH, "CKM_SSL3_MASTER_KEY_DERIVE_DH");
    testCKM(CKM_TLS_PRE_MASTER_KEY_GEN, "CKM_TLS_PRE_MASTER_KEY_GEN");
    testCKM(CKM_TLS_MASTER_KEY_DERIVE, "CKM_TLS_MASTER_KEY_DERIVE");
    testCKM(CKM_TLS_KEY_AND_MAC_DERIVE, "CKM_TLS_KEY_AND_MAC_DERIVE");
    testCKM(CKM_TLS_MASTER_KEY_DERIVE_DH, "CKM_TLS_MASTER_KEY_DERIVE_DH");
    testCKM(CKM_TLS_PRF, "CKM_TLS_PRF");
    testCKM(CKM_SSL3_MD5_MAC, "CKM_SSL3_MD5_MAC");
    testCKM(CKM_SSL3_SHA1_MAC, "CKM_SSL3_SHA1_MAC");
    testCKM(CKM_MD5_KEY_DERIVATION, "CKM_MD5_KEY_DERIVATION");
    testCKM(CKM_MD2_KEY_DERIVATION, "CKM_MD2_KEY_DERIVATION");
    testCKM(CKM_SHA1_KEY_DERIVATION, "CKM_SHA1_KEY_DERIVATION");
    testCKM(CKM_SHA256_KEY_DERIVATION, "CKM_SHA256_KEY_DERIVATION");
    testCKM(CKM_SHA384_KEY_DERIVATION, "CKM_SHA384_KEY_DERIVATION");
    testCKM(CKM_SHA512_KEY_DERIVATION, "CKM_SHA512_KEY_DERIVATION");
    testCKM(CKM_SHA224_KEY_DERIVATION, "CKM_SHA224_KEY_DERIVATION");
    testCKM(CKM_SHA3_256_KEY_DERIVE, "CKM_SHA3_256_KEY_DERIVE");
    testCKM(CKM_SHA3_224_KEY_DERIVE, "CKM_SHA3_224_KEY_DERIVE");
    testCKM(CKM_SHA3_384_KEY_DERIVE, "CKM_SHA3_384_KEY_DERIVE");
    testCKM(CKM_SHA3_512_KEY_DERIVE, "CKM_SHA3_512_KEY_DERIVE");
    testCKM(CKM_SHAKE_128_KEY_DERIVE, "CKM_SHAKE_128_KEY_DERIVE");
    testCKM(CKM_SHAKE_256_KEY_DERIVE, "CKM_SHAKE_256_KEY_DERIVE");
    testCKM(CKM_PBE_MD2_DES_CBC, "CKM_PBE_MD2_DES_CBC");
    testCKM(CKM_PBE_MD5_DES_CBC, "CKM_PBE_MD5_DES_CBC");
    testCKM(CKM_PBE_MD5_CAST_CBC, "CKM_PBE_MD5_CAST_CBC");
    testCKM(CKM_PBE_MD5_CAST3_CBC, "CKM_PBE_MD5_CAST3_CBC");
    testCKM(CKM_PBE_MD5_CAST128_CBC, "CKM_PBE_MD5_CAST128_CBC", "CKM_PBE_MD5_CAST5_CBC");
    testCKM(CKM_PBE_SHA1_CAST128_CBC, "CKM_PBE_SHA1_CAST128_CBC", "CKM_PBE_SHA1_CAST5_CBC");
    testCKM(CKM_PBE_SHA1_RC4_128, "CKM_PBE_SHA1_RC4_128");
    testCKM(CKM_PBE_SHA1_RC4_40, "CKM_PBE_SHA1_RC4_40");
    testCKM(CKM_PBE_SHA1_DES3_EDE_CBC, "CKM_PBE_SHA1_DES3_EDE_CBC");
    testCKM(CKM_PBE_SHA1_DES2_EDE_CBC, "CKM_PBE_SHA1_DES2_EDE_CBC");
    testCKM(CKM_PBE_SHA1_RC2_128_CBC, "CKM_PBE_SHA1_RC2_128_CBC");
    testCKM(CKM_PBE_SHA1_RC2_40_CBC, "CKM_PBE_SHA1_RC2_40_CBC");
    testCKM(CKM_SP800_108_COUNTER_KDF, "CKM_SP800_108_COUNTER_KDF");
    testCKM(CKM_SP800_108_FEEDBACK_KDF, "CKM_SP800_108_FEEDBACK_KDF");
    testCKM(CKM_SP800_108_DOUBLE_PIPELINE_KDF, "CKM_SP800_108_DOUBLE_PIPELINE_KDF");
    testCKM(CKM_PKCS5_PBKD2, "CKM_PKCS5_PBKD2");
    testCKM(CKM_PBA_SHA1_WITH_SHA1_HMAC, "CKM_PBA_SHA1_WITH_SHA1_HMAC");
    testCKM(CKM_WTLS_PRE_MASTER_KEY_GEN, "CKM_WTLS_PRE_MASTER_KEY_GEN");
    testCKM(CKM_WTLS_MASTER_KEY_DERIVE, "CKM_WTLS_MASTER_KEY_DERIVE");
    testCKM(CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC, "CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC");
    testCKM(CKM_WTLS_PRF, "CKM_WTLS_PRF");
    testCKM(CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE, "CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE");
    testCKM(CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE, "CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE");
    testCKM(CKM_TLS10_MAC_SERVER, "CKM_TLS10_MAC_SERVER");
    testCKM(CKM_TLS10_MAC_CLIENT, "CKM_TLS10_MAC_CLIENT");
    testCKM(CKM_TLS12_MAC, "CKM_TLS12_MAC");
    testCKM(CKM_TLS12_KDF, "CKM_TLS12_KDF");
    testCKM(CKM_TLS12_MASTER_KEY_DERIVE, "CKM_TLS12_MASTER_KEY_DERIVE");
    testCKM(CKM_TLS12_KEY_AND_MAC_DERIVE, "CKM_TLS12_KEY_AND_MAC_DERIVE");
    testCKM(CKM_TLS12_MASTER_KEY_DERIVE_DH, "CKM_TLS12_MASTER_KEY_DERIVE_DH");
    testCKM(CKM_TLS12_KEY_SAFE_DERIVE, "CKM_TLS12_KEY_SAFE_DERIVE");
    testCKM(CKM_TLS_MAC, "CKM_TLS_MAC");
    testCKM(CKM_TLS_KDF, "CKM_TLS_KDF");
    testCKM(CKM_KEY_WRAP_LYNKS, "CKM_KEY_WRAP_LYNKS");
    testCKM(CKM_KEY_WRAP_SET_OAEP, "CKM_KEY_WRAP_SET_OAEP");
    testCKM(CKM_CMS_SIG, "CKM_CMS_SIG");
    testCKM(CKM_KIP_DERIVE, "CKM_KIP_DERIVE");
    testCKM(CKM_KIP_WRAP, "CKM_KIP_WRAP");
    testCKM(CKM_KIP_MAC, "CKM_KIP_MAC");
    testCKM(CKM_CAMELLIA_KEY_GEN, "CKM_CAMELLIA_KEY_GEN");
    testCKM(CKM_CAMELLIA_ECB, "CKM_CAMELLIA_ECB");
    testCKM(CKM_CAMELLIA_CBC, "CKM_CAMELLIA_CBC");
    testCKM(CKM_CAMELLIA_MAC, "CKM_CAMELLIA_MAC");
    testCKM(CKM_CAMELLIA_MAC_GENERAL, "CKM_CAMELLIA_MAC_GENERAL");
    testCKM(CKM_CAMELLIA_CBC_PAD, "CKM_CAMELLIA_CBC_PAD");
    testCKM(CKM_CAMELLIA_ECB_ENCRYPT_DATA, "CKM_CAMELLIA_ECB_ENCRYPT_DATA");
    testCKM(CKM_CAMELLIA_CBC_ENCRYPT_DATA, "CKM_CAMELLIA_CBC_ENCRYPT_DATA");
    testCKM(CKM_CAMELLIA_CTR, "CKM_CAMELLIA_CTR");
    testCKM(CKM_ARIA_KEY_GEN, "CKM_ARIA_KEY_GEN");
    testCKM(CKM_ARIA_ECB, "CKM_ARIA_ECB");
    testCKM(CKM_ARIA_CBC, "CKM_ARIA_CBC");
    testCKM(CKM_ARIA_MAC, "CKM_ARIA_MAC");
    testCKM(CKM_ARIA_MAC_GENERAL, "CKM_ARIA_MAC_GENERAL");
    testCKM(CKM_ARIA_CBC_PAD, "CKM_ARIA_CBC_PAD");
    testCKM(CKM_ARIA_ECB_ENCRYPT_DATA, "CKM_ARIA_ECB_ENCRYPT_DATA");
    testCKM(CKM_ARIA_CBC_ENCRYPT_DATA, "CKM_ARIA_CBC_ENCRYPT_DATA");
    testCKM(CKM_SEED_KEY_GEN, "CKM_SEED_KEY_GEN");
    testCKM(CKM_SEED_ECB, "CKM_SEED_ECB");
    testCKM(CKM_SEED_CBC, "CKM_SEED_CBC");
    testCKM(CKM_SEED_MAC, "CKM_SEED_MAC");
    testCKM(CKM_SEED_MAC_GENERAL, "CKM_SEED_MAC_GENERAL");
    testCKM(CKM_SEED_CBC_PAD, "CKM_SEED_CBC_PAD");
    testCKM(CKM_SEED_ECB_ENCRYPT_DATA, "CKM_SEED_ECB_ENCRYPT_DATA");
    testCKM(CKM_SEED_CBC_ENCRYPT_DATA, "CKM_SEED_CBC_ENCRYPT_DATA");
    testCKM(CKM_SKIPJACK_KEY_GEN, "CKM_SKIPJACK_KEY_GEN");
    testCKM(CKM_SKIPJACK_ECB64, "CKM_SKIPJACK_ECB64");
    testCKM(CKM_SKIPJACK_CBC64, "CKM_SKIPJACK_CBC64");
    testCKM(CKM_SKIPJACK_OFB64, "CKM_SKIPJACK_OFB64");
    testCKM(CKM_SKIPJACK_CFB64, "CKM_SKIPJACK_CFB64");
    testCKM(CKM_SKIPJACK_CFB32, "CKM_SKIPJACK_CFB32");
    testCKM(CKM_SKIPJACK_CFB16, "CKM_SKIPJACK_CFB16");
    testCKM(CKM_SKIPJACK_CFB8, "CKM_SKIPJACK_CFB8");
    testCKM(CKM_SKIPJACK_WRAP, "CKM_SKIPJACK_WRAP");
    testCKM(CKM_SKIPJACK_PRIVATE_WRAP, "CKM_SKIPJACK_PRIVATE_WRAP");
    testCKM(CKM_SKIPJACK_RELAYX, "CKM_SKIPJACK_RELAYX");
    testCKM(CKM_KEA_KEY_PAIR_GEN, "CKM_KEA_KEY_PAIR_GEN");
    testCKM(CKM_KEA_KEY_DERIVE, "CKM_KEA_KEY_DERIVE");
    testCKM(CKM_KEA_DERIVE, "CKM_KEA_DERIVE");
    testCKM(CKM_FORTEZZA_TIMESTAMP, "CKM_FORTEZZA_TIMESTAMP");
    testCKM(CKM_BATON_KEY_GEN, "CKM_BATON_KEY_GEN");
    testCKM(CKM_BATON_ECB128, "CKM_BATON_ECB128");
    testCKM(CKM_BATON_ECB96, "CKM_BATON_ECB96");
    testCKM(CKM_BATON_CBC128, "CKM_BATON_CBC128");
    testCKM(CKM_BATON_COUNTER, "CKM_BATON_COUNTER");
    testCKM(CKM_BATON_SHUFFLE, "CKM_BATON_SHUFFLE");
    testCKM(CKM_BATON_WRAP, "CKM_BATON_WRAP");
    testCKM(CKM_EC_KEY_PAIR_GEN, "CKM_EC_KEY_PAIR_GEN", "CKM_ECDSA_KEY_PAIR_GEN");
    testCKM(CKM_ECDSA, "CKM_ECDSA");
    testCKM(CKM_ECDSA_SHA1, "CKM_ECDSA_SHA1");
    testCKM(CKM_ECDSA_SHA224, "CKM_ECDSA_SHA224");
    testCKM(CKM_ECDSA_SHA256, "CKM_ECDSA_SHA256");
    testCKM(CKM_ECDSA_SHA384, "CKM_ECDSA_SHA384");
    testCKM(CKM_ECDSA_SHA512, "CKM_ECDSA_SHA512");
    testCKM(CKM_ECDSA_SHA3_224, "CKM_ECDSA_SHA3_224");
    testCKM(CKM_ECDSA_SHA3_256, "CKM_ECDSA_SHA3_256");
    testCKM(CKM_ECDSA_SHA3_384, "CKM_ECDSA_SHA3_384");
    testCKM(CKM_ECDSA_SHA3_512, "CKM_ECDSA_SHA3_512");
    testCKM(CKM_ECDH1_DERIVE, "CKM_ECDH1_DERIVE");
    testCKM(CKM_ECDH1_COFACTOR_DERIVE, "CKM_ECDH1_COFACTOR_DERIVE");
    testCKM(CKM_ECMQV_DERIVE, "CKM_ECMQV_DERIVE");
    testCKM(CKM_ECDH_AES_KEY_WRAP, "CKM_ECDH_AES_KEY_WRAP");
    testCKM(CKM_RSA_AES_KEY_WRAP, "CKM_RSA_AES_KEY_WRAP");
    testCKM(CKM_EC_EDWARDS_KEY_PAIR_GEN, "CKM_EC_EDWARDS_KEY_PAIR_GEN");
    testCKM(CKM_EC_MONTGOMERY_KEY_PAIR_GEN, "CKM_EC_MONTGOMERY_KEY_PAIR_GEN");
    testCKM(CKM_EDDSA, "CKM_EDDSA");
    testCKM(CKM_JUNIPER_KEY_GEN, "CKM_JUNIPER_KEY_GEN");
    testCKM(CKM_JUNIPER_ECB128, "CKM_JUNIPER_ECB128");
    testCKM(CKM_JUNIPER_CBC128, "CKM_JUNIPER_CBC128");
    testCKM(CKM_JUNIPER_COUNTER, "CKM_JUNIPER_COUNTER");
    testCKM(CKM_JUNIPER_SHUFFLE, "CKM_JUNIPER_SHUFFLE");
    testCKM(CKM_JUNIPER_WRAP, "CKM_JUNIPER_WRAP");
    testCKM(CKM_FASTHASH, "CKM_FASTHASH");
    testCKM(CKM_AES_XTS, "CKM_AES_XTS");
    testCKM(CKM_AES_XTS_KEY_GEN, "CKM_AES_XTS_KEY_GEN");
    testCKM(CKM_AES_KEY_GEN, "CKM_AES_KEY_GEN");
    testCKM(CKM_AES_ECB, "CKM_AES_ECB");
    testCKM(CKM_AES_CBC, "CKM_AES_CBC");
    testCKM(CKM_AES_MAC, "CKM_AES_MAC");
    testCKM(CKM_AES_MAC_GENERAL, "CKM_AES_MAC_GENERAL");
    testCKM(CKM_AES_CBC_PAD, "CKM_AES_CBC_PAD");
    testCKM(CKM_AES_CTR, "CKM_AES_CTR");
    testCKM(CKM_AES_GCM, "CKM_AES_GCM");
    testCKM(CKM_AES_CCM, "CKM_AES_CCM");
    testCKM(CKM_AES_CTS, "CKM_AES_CTS");
    testCKM(CKM_AES_CMAC, "CKM_AES_CMAC");
    testCKM(CKM_AES_CMAC_GENERAL, "CKM_AES_CMAC_GENERAL");
    testCKM(CKM_AES_XCBC_MAC, "CKM_AES_XCBC_MAC");
    testCKM(CKM_AES_XCBC_MAC_96, "CKM_AES_XCBC_MAC_96");
    testCKM(CKM_AES_GMAC, "CKM_AES_GMAC");
    testCKM(CKM_BLOWFISH_KEY_GEN, "CKM_BLOWFISH_KEY_GEN");
    testCKM(CKM_BLOWFISH_CBC, "CKM_BLOWFISH_CBC");
    testCKM(CKM_TWOFISH_KEY_GEN, "CKM_TWOFISH_KEY_GEN");
    testCKM(CKM_TWOFISH_CBC, "CKM_TWOFISH_CBC");
    testCKM(CKM_BLOWFISH_CBC_PAD, "CKM_BLOWFISH_CBC_PAD");
    testCKM(CKM_TWOFISH_CBC_PAD, "CKM_TWOFISH_CBC_PAD");
    testCKM(CKM_DES_ECB_ENCRYPT_DATA, "CKM_DES_ECB_ENCRYPT_DATA");
    testCKM(CKM_DES_CBC_ENCRYPT_DATA, "CKM_DES_CBC_ENCRYPT_DATA");
    testCKM(CKM_DES3_ECB_ENCRYPT_DATA, "CKM_DES3_ECB_ENCRYPT_DATA");
    testCKM(CKM_DES3_CBC_ENCRYPT_DATA, "CKM_DES3_CBC_ENCRYPT_DATA");
    testCKM(CKM_AES_ECB_ENCRYPT_DATA, "CKM_AES_ECB_ENCRYPT_DATA");
    testCKM(CKM_AES_CBC_ENCRYPT_DATA, "CKM_AES_CBC_ENCRYPT_DATA");
    testCKM(CKM_GOSTR3410_KEY_PAIR_GEN, "CKM_GOSTR3410_KEY_PAIR_GEN");
    testCKM(CKM_GOSTR3410, "CKM_GOSTR3410");
    testCKM(CKM_GOSTR3410_WITH_GOSTR3411, "CKM_GOSTR3410_WITH_GOSTR3411");
    testCKM(CKM_GOSTR3410_KEY_WRAP, "CKM_GOSTR3410_KEY_WRAP");
    testCKM(CKM_GOSTR3410_DERIVE, "CKM_GOSTR3410_DERIVE");
    testCKM(CKM_GOSTR3411, "CKM_GOSTR3411");
    testCKM(CKM_GOSTR3411_HMAC, "CKM_GOSTR3411_HMAC");
    testCKM(CKM_GOST28147_KEY_GEN, "CKM_GOST28147_KEY_GEN");
    testCKM(CKM_GOST28147_ECB, "CKM_GOST28147_ECB");
    testCKM(CKM_GOST28147, "CKM_GOST28147");
    testCKM(CKM_GOST28147_MAC, "CKM_GOST28147_MAC");
    testCKM(CKM_GOST28147_KEY_WRAP, "CKM_GOST28147_KEY_WRAP");
    testCKM(CKM_CHACHA20_KEY_GEN, "CKM_CHACHA20_KEY_GEN");
    testCKM(CKM_CHACHA20, "CKM_CHACHA20");
    testCKM(CKM_POLY1305_KEY_GEN, "CKM_POLY1305_KEY_GEN");
    testCKM(CKM_POLY1305, "CKM_POLY1305");
    testCKM(CKM_DSA_PARAMETER_GEN, "CKM_DSA_PARAMETER_GEN");
    testCKM(CKM_DH_PKCS_PARAMETER_GEN, "CKM_DH_PKCS_PARAMETER_GEN");
    testCKM(CKM_X9_42_DH_PARAMETER_GEN, "CKM_X9_42_DH_PARAMETER_GEN");
    testCKM(CKM_DSA_PROBABLISTIC_PARAMETER_GEN, "CKM_DSA_PROBABLISTIC_PARAMETER_GEN");
    testCKM(CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN, "CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN");
    testCKM(CKM_AES_OFB, "CKM_AES_OFB");
    testCKM(CKM_AES_CFB64, "CKM_AES_CFB64");
    testCKM(CKM_AES_CFB8, "CKM_AES_CFB8");
    testCKM(CKM_AES_CFB128, "CKM_AES_CFB128");
    testCKM(CKM_AES_CFB1, "CKM_AES_CFB1");
    testCKM(CKM_AES_KEY_WRAP, "CKM_AES_KEY_WRAP");
    testCKM(CKM_AES_KEY_WRAP_PAD, "CKM_AES_KEY_WRAP_PAD");
    testCKM(CKM_AES_KEY_WRAP_KWP, "CKM_AES_KEY_WRAP_KWP");
    testCKM(CKM_RSA_PKCS_TPM_1_1, "CKM_RSA_PKCS_TPM_1_1");
    testCKM(CKM_RSA_PKCS_OAEP_TPM_1_1, "CKM_RSA_PKCS_OAEP_TPM_1_1");
    testCKM(CKM_SHA_1_KEY_GEN, "CKM_SHA_1_KEY_GEN");
    testCKM(CKM_SHA224_KEY_GEN, "CKM_SHA224_KEY_GEN");
    testCKM(CKM_SHA256_KEY_GEN, "CKM_SHA256_KEY_GEN");
    testCKM(CKM_SHA384_KEY_GEN, "CKM_SHA384_KEY_GEN");
    testCKM(CKM_SHA512_KEY_GEN, "CKM_SHA512_KEY_GEN");
    testCKM(CKM_SHA512_224_KEY_GEN, "CKM_SHA512_224_KEY_GEN");
    testCKM(CKM_SHA512_256_KEY_GEN, "CKM_SHA512_256_KEY_GEN");
    testCKM(CKM_SHA512_T_KEY_GEN, "CKM_SHA512_T_KEY_GEN");
    testCKM(CKM_NULL, "CKM_NULL");
    testCKM(CKM_BLAKE2B_160, "CKM_BLAKE2B_160");
    testCKM(CKM_BLAKE2B_160_HMAC, "CKM_BLAKE2B_160_HMAC");
    testCKM(CKM_BLAKE2B_160_HMAC_GENERAL, "CKM_BLAKE2B_160_HMAC_GENERAL");
    testCKM(CKM_BLAKE2B_160_KEY_DERIVE, "CKM_BLAKE2B_160_KEY_DERIVE");
    testCKM(CKM_BLAKE2B_160_KEY_GEN, "CKM_BLAKE2B_160_KEY_GEN");
    testCKM(CKM_BLAKE2B_256, "CKM_BLAKE2B_256");
    testCKM(CKM_BLAKE2B_256_HMAC, "CKM_BLAKE2B_256_HMAC");
    testCKM(CKM_BLAKE2B_256_HMAC_GENERAL, "CKM_BLAKE2B_256_HMAC_GENERAL");
    testCKM(CKM_BLAKE2B_256_KEY_DERIVE, "CKM_BLAKE2B_256_KEY_DERIVE");
    testCKM(CKM_BLAKE2B_256_KEY_GEN, "CKM_BLAKE2B_256_KEY_GEN");
    testCKM(CKM_BLAKE2B_384, "CKM_BLAKE2B_384");
    testCKM(CKM_BLAKE2B_384_HMAC, "CKM_BLAKE2B_384_HMAC");
    testCKM(CKM_BLAKE2B_384_HMAC_GENERAL, "CKM_BLAKE2B_384_HMAC_GENERAL");
    testCKM(CKM_BLAKE2B_384_KEY_DERIVE, "CKM_BLAKE2B_384_KEY_DERIVE");
    testCKM(CKM_BLAKE2B_384_KEY_GEN, "CKM_BLAKE2B_384_KEY_GEN");
    testCKM(CKM_BLAKE2B_512, "CKM_BLAKE2B_512");
    testCKM(CKM_BLAKE2B_512_HMAC, "CKM_BLAKE2B_512_HMAC");
    testCKM(CKM_BLAKE2B_512_HMAC_GENERAL, "CKM_BLAKE2B_512_HMAC_GENERAL");
    testCKM(CKM_BLAKE2B_512_KEY_DERIVE, "CKM_BLAKE2B_512_KEY_DERIVE");
    testCKM(CKM_BLAKE2B_512_KEY_GEN, "CKM_BLAKE2B_512_KEY_GEN");
    testCKM(CKM_SALSA20, "CKM_SALSA20");
    testCKM(CKM_CHACHA20_POLY1305, "CKM_CHACHA20_POLY1305");
    testCKM(CKM_SALSA20_POLY1305, "CKM_SALSA20_POLY1305");
    testCKM(CKM_X3DH_INITIALIZE, "CKM_X3DH_INITIALIZE");
    testCKM(CKM_X3DH_RESPOND, "CKM_X3DH_RESPOND");
    testCKM(CKM_X2RATCHET_INITIALIZE, "CKM_X2RATCHET_INITIALIZE");
    testCKM(CKM_X2RATCHET_RESPOND, "CKM_X2RATCHET_RESPOND");
    testCKM(CKM_X2RATCHET_ENCRYPT, "CKM_X2RATCHET_ENCRYPT");
    testCKM(CKM_X2RATCHET_DECRYPT, "CKM_X2RATCHET_DECRYPT");
    testCKM(CKM_XEDDSA, "CKM_XEDDSA");
    testCKM(CKM_VENDOR_SM2_KEY_PAIR_GEN, "CKM_VENDOR_SM2_KEY_PAIR_GEN");
    testCKM(CKM_VENDOR_SM2, "CKM_VENDOR_SM2");
    testCKM(CKM_VENDOR_SM2_SM3, "CKM_VENDOR_SM2_SM3");
    testCKM(CKM_VENDOR_SM2_ENCRYPT, "CKM_VENDOR_SM2_ENCRYPT");
    testCKM(CKM_VENDOR_SM3, "CKM_VENDOR_SM3");
    testCKM(CKM_VENDOR_SM4_KEY_GEN, "CKM_VENDOR_SM4_KEY_GEN");
    testCKM(CKM_VENDOR_SM4_ECB, "CKM_VENDOR_SM4_ECB");
    testCKM(CKM_VENDOR_SM4_CBC, "CKM_VENDOR_SM4_CBC");
    testCKM(CKM_VENDOR_SM4_MAC_GENERAL, "CKM_VENDOR_SM4_MAC_GENERAL");
    testCKM(CKM_VENDOR_SM4_MAC, "CKM_VENDOR_SM4_MAC");

    // aliases
    Assert.assertEquals("alias.CKM_PBE_MD5_CAST128_CBC", CKM_PBE_MD5_CAST128_CBC, CKM_PBE_MD5_CAST5_CBC);
    Assert.assertEquals("alias.CKM_ECDSA_KEY_PAIR_GEN", CKM_EC_KEY_PAIR_GEN, CKM_ECDSA_KEY_PAIR_GEN);
  }

  private static void testCKM(long code, String name, String... aliases) {
    evaluate(Category.CKM, code, name, aliases);
  }

  @Test
  public void testCKO() {
    testCKO(CKO_DATA, "CKO_DATA");
    testCKO(CKO_CERTIFICATE, "CKO_CERTIFICATE");
    testCKO(CKO_PUBLIC_KEY, "CKO_PUBLIC_KEY");
    testCKO(CKO_PRIVATE_KEY, "CKO_PRIVATE_KEY");
    testCKO(CKO_SECRET_KEY, "CKO_SECRET_KEY");
    testCKO(CKO_HW_FEATURE, "CKO_HW_FEATURE");
    testCKO(CKO_DOMAIN_PARAMETERS, "CKO_DOMAIN_PARAMETERS");
    testCKO(CKO_OTP_KEY, "CKO_OTP_KEY");
    testCKO(CKO_PROFILE, "CKO_PROFILE");
  }

  private static void testCKO(long code, String name, String... aliases) {
    evaluate(Category.CKO, code, name, aliases);
  }

  @Test
  public void testCKP_PRF() {
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA1, "CKP_PKCS5_PBKD2_HMAC_SHA1");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_GOSTR3411, "CKP_PKCS5_PBKD2_HMAC_GOSTR3411");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA224, "CKP_PKCS5_PBKD2_HMAC_SHA224");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA256, "CKP_PKCS5_PBKD2_HMAC_SHA256");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA384, "CKP_PKCS5_PBKD2_HMAC_SHA384");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA512, "CKP_PKCS5_PBKD2_HMAC_SHA512");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA512_224, "CKP_PKCS5_PBKD2_HMAC_SHA512_224");
    testCKP_PRF(CKP_PKCS5_PBKD2_HMAC_SHA512_256, "CKP_PKCS5_PBKD2_HMAC_SHA512_256");
  }

  private static void testCKP_PRF(long code, String name, String... aliases) {
    evaluate(Category.CKP_PRF, code, name, aliases);
  }

  @Test
  public void testCKP_PROFILE_ID() {
    testCKP_PROFILE_ID(CKP_INVALID_ID, "CKP_INVALID_ID");
    testCKP_PROFILE_ID(CKP_BASELINE_PROVIDER, "CKP_BASELINE_PROVIDER");
    testCKP_PROFILE_ID(CKP_EXTENDED_PROVIDER, "CKP_EXTENDED_PROVIDER");
    testCKP_PROFILE_ID(CKP_AUTHENTICATION_TOKEN, "CKP_AUTHENTICATION_TOKEN");
  }

  private static void testCKP_PROFILE_ID(long code, String name, String... aliases) {
    evaluate(Category.CKP_PROFILE_ID, code, name, aliases);
  }

  @Test
  public void testCKR() {
    testCKR(CKR_OK, "CKR_OK");
    testCKR(CKR_CANCEL, "CKR_CANCEL");
    testCKR(CKR_HOST_MEMORY, "CKR_HOST_MEMORY");
    testCKR(CKR_SLOT_ID_INVALID, "CKR_SLOT_ID_INVALID");
    testCKR(CKR_GENERAL_ERROR, "CKR_GENERAL_ERROR");
    testCKR(CKR_FUNCTION_FAILED, "CKR_FUNCTION_FAILED");
    testCKR(CKR_ARGUMENTS_BAD, "CKR_ARGUMENTS_BAD");
    testCKR(CKR_NO_EVENT, "CKR_NO_EVENT");
    testCKR(CKR_NEED_TO_CREATE_THREADS, "CKR_NEED_TO_CREATE_THREADS");
    testCKR(CKR_CANT_LOCK, "CKR_CANT_LOCK");
    testCKR(CKR_ATTRIBUTE_READ_ONLY, "CKR_ATTRIBUTE_READ_ONLY");
    testCKR(CKR_ATTRIBUTE_SENSITIVE, "CKR_ATTRIBUTE_SENSITIVE");
    testCKR(CKR_ATTRIBUTE_TYPE_INVALID, "CKR_ATTRIBUTE_TYPE_INVALID");
    testCKR(CKR_ATTRIBUTE_VALUE_INVALID, "CKR_ATTRIBUTE_VALUE_INVALID");
    testCKR(CKR_ACTION_PROHIBITED, "CKR_ACTION_PROHIBITED");
    testCKR(CKR_DATA_INVALID, "CKR_DATA_INVALID");
    testCKR(CKR_DATA_LEN_RANGE, "CKR_DATA_LEN_RANGE");
    testCKR(CKR_DEVICE_ERROR, "CKR_DEVICE_ERROR");
    testCKR(CKR_DEVICE_MEMORY, "CKR_DEVICE_MEMORY");
    testCKR(CKR_DEVICE_REMOVED, "CKR_DEVICE_REMOVED");
    testCKR(CKR_ENCRYPTED_DATA_INVALID, "CKR_ENCRYPTED_DATA_INVALID");
    testCKR(CKR_ENCRYPTED_DATA_LEN_RANGE, "CKR_ENCRYPTED_DATA_LEN_RANGE");
    testCKR(CKR_AEAD_DECRYPT_FAILED, "CKR_AEAD_DECRYPT_FAILED");
    testCKR(CKR_FUNCTION_CANCELED, "CKR_FUNCTION_CANCELED");
    testCKR(CKR_FUNCTION_NOT_PARALLEL, "CKR_FUNCTION_NOT_PARALLEL");
    testCKR(CKR_FUNCTION_NOT_SUPPORTED, "CKR_FUNCTION_NOT_SUPPORTED");
    testCKR(CKR_KEY_HANDLE_INVALID, "CKR_KEY_HANDLE_INVALID");
    testCKR(CKR_KEY_SIZE_RANGE, "CKR_KEY_SIZE_RANGE");
    testCKR(CKR_KEY_TYPE_INCONSISTENT, "CKR_KEY_TYPE_INCONSISTENT");
    testCKR(CKR_KEY_NOT_NEEDED, "CKR_KEY_NOT_NEEDED");
    testCKR(CKR_KEY_CHANGED, "CKR_KEY_CHANGED");
    testCKR(CKR_KEY_NEEDED, "CKR_KEY_NEEDED");
    testCKR(CKR_KEY_INDIGESTIBLE, "CKR_KEY_INDIGESTIBLE");
    testCKR(CKR_KEY_FUNCTION_NOT_PERMITTED, "CKR_KEY_FUNCTION_NOT_PERMITTED");
    testCKR(CKR_KEY_NOT_WRAPPABLE, "CKR_KEY_NOT_WRAPPABLE");
    testCKR(CKR_KEY_UNEXTRACTABLE, "CKR_KEY_UNEXTRACTABLE");
    testCKR(CKR_MECHANISM_INVALID, "CKR_MECHANISM_INVALID");
    testCKR(CKR_MECHANISM_PARAM_INVALID, "CKR_MECHANISM_PARAM_INVALID");
    testCKR(CKR_OBJECT_HANDLE_INVALID, "CKR_OBJECT_HANDLE_INVALID");
    testCKR(CKR_OPERATION_ACTIVE, "CKR_OPERATION_ACTIVE");
    testCKR(CKR_OPERATION_NOT_INITIALIZED, "CKR_OPERATION_NOT_INITIALIZED");
    testCKR(CKR_PIN_INCORRECT, "CKR_PIN_INCORRECT");
    testCKR(CKR_PIN_INVALID, "CKR_PIN_INVALID");
    testCKR(CKR_PIN_LEN_RANGE, "CKR_PIN_LEN_RANGE");
    testCKR(CKR_PIN_EXPIRED, "CKR_PIN_EXPIRED");
    testCKR(CKR_PIN_LOCKED, "CKR_PIN_LOCKED");
    testCKR(CKR_SESSION_CLOSED, "CKR_SESSION_CLOSED");
    testCKR(CKR_SESSION_COUNT, "CKR_SESSION_COUNT");
    testCKR(CKR_SESSION_HANDLE_INVALID, "CKR_SESSION_HANDLE_INVALID");
    testCKR(CKR_SESSION_PARALLEL_NOT_SUPPORTED, "CKR_SESSION_PARALLEL_NOT_SUPPORTED");
    testCKR(CKR_SESSION_READ_ONLY, "CKR_SESSION_READ_ONLY");
    testCKR(CKR_SESSION_EXISTS, "CKR_SESSION_EXISTS");
    testCKR(CKR_SESSION_READ_ONLY_EXISTS, "CKR_SESSION_READ_ONLY_EXISTS");
    testCKR(CKR_SESSION_READ_WRITE_SO_EXISTS, "CKR_SESSION_READ_WRITE_SO_EXISTS");
    testCKR(CKR_SIGNATURE_INVALID, "CKR_SIGNATURE_INVALID");
    testCKR(CKR_SIGNATURE_LEN_RANGE, "CKR_SIGNATURE_LEN_RANGE");
    testCKR(CKR_TEMPLATE_INCOMPLETE, "CKR_TEMPLATE_INCOMPLETE");
    testCKR(CKR_TEMPLATE_INCONSISTENT, "CKR_TEMPLATE_INCONSISTENT");
    testCKR(CKR_TOKEN_NOT_PRESENT, "CKR_TOKEN_NOT_PRESENT");
    testCKR(CKR_TOKEN_NOT_RECOGNIZED, "CKR_TOKEN_NOT_RECOGNIZED");
    testCKR(CKR_TOKEN_WRITE_PROTECTED, "CKR_TOKEN_WRITE_PROTECTED");
    testCKR(CKR_UNWRAPPING_KEY_HANDLE_INVALID, "CKR_UNWRAPPING_KEY_HANDLE_INVALID");
    testCKR(CKR_UNWRAPPING_KEY_SIZE_RANGE, "CKR_UNWRAPPING_KEY_SIZE_RANGE");
    testCKR(CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT, "CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT");
    testCKR(CKR_USER_ALREADY_LOGGED_IN, "CKR_USER_ALREADY_LOGGED_IN");
    testCKR(CKR_USER_NOT_LOGGED_IN, "CKR_USER_NOT_LOGGED_IN");
    testCKR(CKR_USER_PIN_NOT_INITIALIZED, "CKR_USER_PIN_NOT_INITIALIZED");
    testCKR(CKR_USER_TYPE_INVALID, "CKR_USER_TYPE_INVALID");
    testCKR(CKR_USER_ANOTHER_ALREADY_LOGGED_IN, "CKR_USER_ANOTHER_ALREADY_LOGGED_IN");
    testCKR(CKR_USER_TOO_MANY_TYPES, "CKR_USER_TOO_MANY_TYPES");
    testCKR(CKR_WRAPPED_KEY_INVALID, "CKR_WRAPPED_KEY_INVALID");
    testCKR(CKR_WRAPPED_KEY_LEN_RANGE, "CKR_WRAPPED_KEY_LEN_RANGE");
    testCKR(CKR_WRAPPING_KEY_HANDLE_INVALID, "CKR_WRAPPING_KEY_HANDLE_INVALID");
    testCKR(CKR_WRAPPING_KEY_SIZE_RANGE, "CKR_WRAPPING_KEY_SIZE_RANGE");
    testCKR(CKR_WRAPPING_KEY_TYPE_INCONSISTENT, "CKR_WRAPPING_KEY_TYPE_INCONSISTENT");
    testCKR(CKR_RANDOM_SEED_NOT_SUPPORTED, "CKR_RANDOM_SEED_NOT_SUPPORTED");
    testCKR(CKR_RANDOM_NO_RNG, "CKR_RANDOM_NO_RNG");
    testCKR(CKR_DOMAIN_PARAMS_INVALID, "CKR_DOMAIN_PARAMS_INVALID");
    testCKR(CKR_CURVE_NOT_SUPPORTED, "CKR_CURVE_NOT_SUPPORTED");
    testCKR(CKR_BUFFER_TOO_SMALL, "CKR_BUFFER_TOO_SMALL");
    testCKR(CKR_SAVED_STATE_INVALID, "CKR_SAVED_STATE_INVALID");
    testCKR(CKR_INFORMATION_SENSITIVE, "CKR_INFORMATION_SENSITIVE");
    testCKR(CKR_STATE_UNSAVEABLE, "CKR_STATE_UNSAVEABLE");
    testCKR(CKR_CRYPTOKI_NOT_INITIALIZED, "CKR_CRYPTOKI_NOT_INITIALIZED");
    testCKR(CKR_CRYPTOKI_ALREADY_INITIALIZED, "CKR_CRYPTOKI_ALREADY_INITIALIZED");
    testCKR(CKR_MUTEX_BAD, "CKR_MUTEX_BAD");
    testCKR(CKR_MUTEX_NOT_LOCKED, "CKR_MUTEX_NOT_LOCKED");
    testCKR(CKR_NEW_PIN_MODE, "CKR_NEW_PIN_MODE");
    testCKR(CKR_NEXT_OTP, "CKR_NEXT_OTP");
    testCKR(CKR_EXCEEDED_MAX_ITERATIONS, "CKR_EXCEEDED_MAX_ITERATIONS");
    testCKR(CKR_FIPS_SELF_TEST_FAILED, "CKR_FIPS_SELF_TEST_FAILED");
    testCKR(CKR_LIBRARY_LOAD_FAILED, "CKR_LIBRARY_LOAD_FAILED");
    testCKR(CKR_PIN_TOO_WEAK, "CKR_PIN_TOO_WEAK");
    testCKR(CKR_PUBLIC_KEY_INVALID, "CKR_PUBLIC_KEY_INVALID");
    testCKR(CKR_FUNCTION_REJECTED, "CKR_FUNCTION_REJECTED");
    testCKR(CKR_TOKEN_RESOURCE_EXCEEDED, "CKR_TOKEN_RESOURCE_EXCEEDED");
  }

  private static void testCKR(long code, String name, String... aliases) {
    evaluate(Category.CKR, code, name, aliases);
  }

  @Test
  public void testCKS() {
    testCKS(CKS_RO_PUBLIC_SESSION, "CKS_RO_PUBLIC_SESSION");
    testCKS(CKS_RO_USER_FUNCTIONS, "CKS_RO_USER_FUNCTIONS");
    testCKS(CKS_RW_PUBLIC_SESSION, "CKS_RW_PUBLIC_SESSION");
    testCKS(CKS_RW_USER_FUNCTIONS, "CKS_RW_USER_FUNCTIONS");
    testCKS(CKS_RW_SO_FUNCTIONS, "CKS_RW_SO_FUNCTIONS");
  }

  private static void testCKS(long code, String name, String... aliases) {
    evaluate(Category.CKS, code, name, aliases);
  }

  @Test
  public void testCKU() {
    testCKU(CKU_SO, "CKU_SO");
    testCKU(CKU_USER, "CKU_USER");
    testCKU(CKU_CONTEXT_SPECIFIC, "CKU_CONTEXT_SPECIFIC");
  }

  private static void testCKU(long code, String name, String... aliases) {
    evaluate(Category.CKU, code, name, aliases);
  }

  @Test
  public void testCKZ() {
    // CKZ_DATA_SPECIFIED
    testCKZ(CKZ_SALT_SPECIFIED, "CKZ_SALT_SPECIFIED", "CKZ_DATA_SPECIFIED");
    testCKZ(CKZ_DATA_SPECIFIED, "CKZ_SALT_SPECIFIED", "CKZ_DATA_SPECIFIED");
  }

  private static void testCKZ(long code, String name, String... aliases) {
    evaluate(Category.CKZ, code, name, aliases);
  }

}
